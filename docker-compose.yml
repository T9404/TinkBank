version: '3.8'

services:
  db:
    container_name: db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_MULTIPLE_DATABASES=${ORIGINATION_DB_NAME},"${PRODUCT_ENGINE_DB_NAME}"
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - ./postgres-data8:/var/lib/postgresql/data8
      - ./create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    networks:
      - fintech-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s
    networks:
      - fintech-network

  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - fintech-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    hostname: kafka-ui
    depends_on:
      - broker
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - fintech-network

  debezium:
    image: debezium/connect:latest
    container_name: debezium
    ports:
      - 8082:8082
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium-config
      OFFSET_STORAGE_TOPIC: debezium-offset
      STATUS_STORAGE_TOPIC: debezium-status
      BOOTSTRAP_SERVERS: broker:29092

  product-engine:
    image: docker-image-product-engine
    build:
      context: product-engine
      dockerfile: ./Dockerfile
    restart: always
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${PRODUCT_ENGINE_DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=${POSTGRES_DRIVER}
    ports:
      - '8086:8086'
      - '9091:9091'
    depends_on:
      - db
    networks:
      - fintech-network

  origination:
    image: docker-image-origination
    build:
      context: origination
      dockerfile: ./Dockerfile
    restart: always
    environment:
        - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${ORIGINATION_DB_NAME}
        - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
        - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
        - SPRING_DATASOURCE_DRIVER_CLASS_NAME=${POSTGRES_DRIVER}
        - GRPC_CLIENT_GRPC_SERVER_ADDRESS=static://scoring:9095
    ports:
      - '8084:8084'
      - '9094:9094'
    depends_on:
      - db
    networks:
      - fintech-network

  payment-gate:
    image: docker-image-payment-gate
    build:
      context: payment-gate
      dockerfile: ./Dockerfile
    restart: always
    environment:
      - PRODUCT_ENGINE_GRPC_HOST=product-engine
      - PRODUCT_ENGINE_GRPC_PORT=9091
    ports:
      - '8080:8080'
    networks:
      - fintech-network

  api:
    image: docker-image-api
    build:
      context: api
      dockerfile: ./Dockerfile
    restart: always
    environment:
      - ORIGINATION_GRPC_HOST=origination
      - ORIGINATION_GRPC_PORT=9094
    ports:
      - '8083:8083'
    networks:
      - fintech-network

  scoring:
    image: docker-image-scoring
    build:
      context: scoring
      dockerfile: ./Dockerfile
    restart: always
    environment:
      - PRODUCT_ENGINE_GRPC_HOST=product-engine
      - PRODUCT_ENGINE_GRPC_PORT=9091
      - GRPC_CLIENT_GRPC_SERVER_ADDRESS=static://product-engine:9091
    ports:
      - '8087:8087'
      - '9095:9095'
    networks:
      - fintech-network

volumes:
  db:
    driver: local

networks:
  fintech-network:
    driver: bridge